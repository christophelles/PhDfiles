from sys import stdout
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.collections as collections
from sklearn.cross_decomposition import PLSRegression
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import mean_squared_error, r2_score


dataf = pd.read_csv('file_name_plsr.csv')

x = data.loc[:, data.columns != 'Days'].values
y = data.loc[:, ['Days']].values
y1 = np.array(data['Days'])

#make wavenumbers using numpy linspace
wn = np.linspace(1799.289, 1000.891, num = 415)

rmse_simple = np.zeros(20)

for nc in range(20):
    # Simple PLS
    pls_simple = PLSRegression(n_components=nc+1)
    
    # Fit
    pls_simple.fit(x, y)
    
    # Cross-validation
    y_cv = cross_val_predict(pls_simple, x, y, cv=10)
    
    # Calculate scores
    score = r2_score(y, y_cv)
    rmse_simple[nc] = np.sqrt(mean_squared_error(y, y_cv))
    
print(np.min(rmse_simple))
with plt.style.context(('ggplot')):
    plt.plot(rmse_simple, 'o-')
    plt.show()
    
pls_simple = PLSRegression(n_components=15)

# Fit
pls_simple.fit(x, y)

# Cross-validation
y_cv_simple = cross_val_predict(pls_simple, x, y, cv=10)

# Calculate scores
score_simple = r2_score(y, y_cv_simple)
rmse_simple = np.sqrt(mean_squared_error(y, y_cv_simple))

# Fit a line to the CV vs response
z = np.polyfit(y1, y_cv_simple, 1)
with plt.style.context(('ggplot')):
    fig, ax = plt.subplots(figsize=(9, 5))
    ax.scatter(y_cv_simple, y, c='red', edgecolors='k')
    
    #Plot the best fit line
    ax.plot(np.polyval(z,y), y, c='blue', linewidth=1)
    
    #Plot the ideal 1:1 line
    ax.plot(y, y, color='green', linewidth=1)
    
    plt.title('$R^{2}$ (Cross Validation): %5.2f ' % score_simple)    
    plt.xlabel('Predicted value')
    plt.ylabel('Measured value')
    plt.show()
    
def mwpls(x,y, win_size, plot=False):
    win_pos = np.arange(0, x.shape[1]-win_size)
    rmse = np.zeros((x.shape[1]-win_size,min(20,win_size)))
    
    for i in win_pos:
        for j in range(min(20,win_size)): # number of PLS components is limited by the win size
            pls = PLSRegression(n_components=j+1)
            # Fit
            pls.fit(x[:,i:i+win_size], y)
            # Cross-validation
            y_cv = cross_val_predict(pls, x[:,i:i+win_size], y, cv=10)
            rmse[i,j] = np.sqrt(mean_squared_error(y_cv, y))
        comp = 100*(i+1)/(x.shape[1]-win_size)
        stdout.write("\r%d%% completed" % comp)
        stdout.flush()
    stdout.write("\n")
    # Calculate and print the position of minimum in MSE
    rmseminx,rmseminy = np.where(rmse==np.min(rmse[np.nonzero(rmse)]))
    print("Suggested window position: ",rmseminx[0],rmseminy[0], rmse[rmseminx,rmseminy])
    
    if plot is True:
        plt.imshow(rmse, interpolation=None, aspect=0.1)
        plt.show()
    
    return(rmseminx[0],rmseminy[0], rmse[rmseminx,rmseminy]) 
    
win_size = [20, 40, 60, 80, 100]
for winsize in win_size:
    win_pos, pls_comp, rmse = mwpls(x,y, winsize, plot=False)
    
#This creates windows of 20, 40, 60, 80 and 100 pixels and runs optimal PLS to increse r2 and min RMSE
#output reads as: start position (pixels), no of components [RMSE]


rmseminy = 18
rmseminx = 151
win_size = 80
pls = PLSRegression(n_components=rmseminy+1)

# Fit
pls.fit(x[:,rmseminx:rmseminx+win_size], y)

# Cross-validation
y_cv = cross_val_predict(pls, x[:,rmseminx:rmseminx+win_size], y, cv=10)

# Calculate scores
score_mw = r2_score(y, y_cv)
rmse_mw = np.sqrt(mean_squared_error(y, y_cv))

# Fit a line to the CV vs response
z = np.polyfit(y1, y_cv, 1)
with plt.style.context(('ggplot')):
    fig, ax = plt.subplots(figsize=(9, 5))
    ax.scatter(y_cv, y, c='red', edgecolors='k')
    
    #Plot the best fit line
    ax.plot(np.polyval(z,y), y, c='blue', linewidth=1)
    
    #Plot the ideal 1:1 line
    ax.plot(y, y, color='green', linewidth=1)
    plt.title('$R^{2}$ (CV): %5.2f ' % score_mw) 
    plt.xlabel('Predicted value')
    plt.ylabel('Measured value')
    plt.show()
    
fig, ax = plt.subplots(figsize=(9, 6))
with plt.style.context(('ggplot')): 
    ax.plot(wn,x.T)
    plt.xlabel("Wavenumber [1/cm]")
    plt.ylabel('Second derivative absorbance spectra')

    collection = collections.BrokenBarHCollection.span_where(wn, ymin=-5e8, ymax=5e8, where=(np.logical_and(wn<=wn[rmseminx], wn>=wn[rmseminx+win_size])), facecolor='green', alpha=0.5)
    
ax.add_collection(collection)
plt.show()
plt.savefig('GS_PLS_window_1800.jpg')
